GIT:

Personal: juanbeltran2
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

Instalar Django:

C:\Users\Juan>pip install Django==4.2.3   # => Version que aparece en la pagina de Django https://www.djangoproject.com/download/

Crear Proyecto:

1. Ubicarse en el directorio en donde se va a crear
2. Digitar por consola: E:\Cursos\Django> django-admin startproject aprendiendoDjango 
3. Alistar el proyecto recien creado: E:\Cursos\Django\aprendiendoDjango> python manage.py migrate
4. Lanzar el proyecto: python manage.py runserver

Ejecutar proyecto
 python .\manage.py runserver

Crear app dentro de nuestro proyecto

1. Ubicarse dentro del proyecto E:\Cursos\Django\aprendiendoDjango> 
2. python manage.py startapp miapp


Crear vistas

1. Se edita el archivo E:\Cursos\Django\aprendiendoDjango\miapp\views.py

Crear carpeta de templates 
1. crear los archivos html
2. Adicionar el proyecto en el archivo de settings
3. renderizar en las views a las páginas del html
4. Crear la pagina de layout la cual es la base para los otros templates
4. En cada templates se debe extender el layout 

2. instalar pip install plint-django para ayuda en la escritura (no es necesario)

3. Manejo de BD:

    1. Crear las tablas en el archivo de models del proyecto
    2. Verificar en settings del proyecto que mi proyecto este en la lista de INSTALLED_APPS, de lo contrario, se debe agregar
    #### estas modificaciones es tanto para crear como para actualizar
    3. Crear la migracion: Desde la raiz del proyecto, ejecutar python manage.py makemigrations 
    4. Crear la estrucura sql: Desde la raiz del proyecto, ejecutar python manage.py sqlmigrate miapp 0001  # (miapp: es el nombre del proyecto, 0001, es el numer de la cracion creada en el paso anterior )
    5. Crear la tabla: python manage.py migrate



############### Migracion ################################
python manage.py makemigrations         ===> Creamos la tarea de migracion
python manage.py sqlmigrate pages 0001  ===> Indicamos la migracion que vamos a realizar
python manage.py migrate                ===> Ejecutamos la migracion



############## Crear usuario para el panel de adeministracion de django (http://127.0.0.1:8000/admin) 

Desde la consola escribir y diligenciar los datos (yo deje usuario: Juan pass: Juan)
E:\Cursos\Django\aprendiendoDjango>python manage.py createsuperuser

Se puede modificar esta vista del admin editando el scrip E:\Cursos\Django\aprendiendoDjango\miapp\admin.py y ProyectoDjango\pages\apps.py

############ Imagenes ###################### 

1. MOdificar el archivo settings de la aplicacion para establecer la ruta en donde quedaran las imagenes (MEDIA_URL y MEDIA_ROOT)
2. Modificamos en la tabla las caracteristicas de la columna de la imagenes (upload_to)
3. Intalamos la libreria de Pillow (pip install Pillow) 
4. En el archivo de E:\Cursos\Django\aprendiendoDjango\aprendiendoDjango\urls.py modificamos para que permita mostrar las imagenes

######## Crear un nuevo proyecto ##############

1. Ir a la carpeta raiz y Digitar por consola: E:\Cursos\Django> django-admin startproject ProyectoDjango
2. Ingresamos al proyecto y en settings mofidicamos el idioma en LANGUAGE_CODE
3. Corremos el manage.py para confirmar que el proyecto inicie
4. Creamos la primer app la cual nos ultilizaremos como la base (\ProyectoDjango>python manage.py startapp mainapp)
5. Adicionamos la nueva app en el settings principal en INSTALLED_APPS de ProyectoDjango\ProyectoDjango\settings.py
6. Empezamos creando el index de la vista ProyectoDjango\mainapp\views.py
7. Creamos la carpeta de templates y los folders adicionales que sean necesitaremos para identificar cada aplicacion
8. Creamos el archivo .html dentro de la carpeta de templates que se reendizara cuando se ingrese al index
9. Importamos la aplicacion y configuramos las urls en ProyectoDjango\ProyectoDjango\urls.py
10. Creamos la carpeta de static/css y el archivo de estilos
11. Creamos el template de layout
12. Heredamos el layout en los template de .html
13. Creamos una nueva app para manejar la paginacion (ProyectoDjango>python manage.py startapp pages)
14. Incluimos la nueva app en INSTALLED_APPS
15. Creamos el modelo en ProyectoDjango\pages\models.py
16. Hacemos la migracion para que se creen las tablas (pasos de la migracion, en el archivo de models)
17. Creamos el usuario para el panel de administracion de Django
18. configuramos admin.py, apps.py y settings.py (TEMPLATES) para poder que la página se puede haer visible desde el panel de administrador de Django
19. Creamos 3 paginas desde el panel de administracion (es hacer un insert a la tabla)
20. creamos el script context_processors.py ( el context_processors son instrucciones que se cargan en todas las plantillas del proyecto )
21. Modificamos el archivo context_processors.py con la informacion que queremos que sea global en los templates
22. Lo configuramos en E:\Cursos\Django\ProyectoDjango\ProyectoDjango\settings.py TEMPLATES
23. Cargamos las paginas consultadas desde el context en el menu del layout E:\Cursos\Django\ProyectoDjango\mainapp\templates\layouts\layout.html
24. Modificamos el archov ProyectoDjango\pages\views.py con la ruta
25. Creamos la nueva pagina de html E:\Cursos\Django\ProyectoDjango\pages\templates\pages\page.html
26. Adicionamos la ruta E:\Cursos\Django\ProyectoDjango\ProyectoDjango\urls.py
27. Optimizar las url, en cada app se crea el fichero urls.py y se colocan las rutas que estaban en E:\Cursos\Django\ProyectoDjango\ProyectoDjango\urls.py
28. Instalamos el paquete de editor de texto enriquecido pip install django-ckeditor (pagina de documentacion https://django-ckeditor.readthedocs.io/en/latest/) y https://ckeditor.com/docs/ckeditor4/latest/features/toolbar.html
29. Adicionamos la nueva libreria en las INSTALLED_APPS de ProyectoDjango\ProyectoDjango\settings.py
30. Importamos la libreria en ProyectoDjango\pages\models.py y cambiamos la columna que necesitamos
31. Se puede configurar el ckeditor en CKEDITOR_CONFIGS del ProyectoDjango\ProyectoDjango\settings.py
32. 